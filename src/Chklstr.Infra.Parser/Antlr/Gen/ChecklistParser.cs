//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Workspace/chklstr.net/src/Chklstr.Infra.Parser\ChecklistParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Chklstr.Infra.Parser.Antlr.Gen {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ChecklistParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Header_Cmd=1, Checklist_Cmd=2, Checklist_Sub_Cmd=3, Checklist_Sub_End_Cmd=4, 
		DocString_Cmd=5, Checklist_Item_Cmd=6, Separator_Cmd=7, CHECKLIST_SUB_END_=8, 
		HEADER_=9, CHECKLIST_=10, CHECKLIST_SUB_=11, CTX_START_=12, ITEM_START_=13, 
		EOL=14, WS=15, CHR=16, BLANK_LINE=17, ErrorChar=18, S_WS=19, Ctx=20, Separator=21, 
		NameErrorChar=22;
	public const int
		RULE_doc = 0, RULE_title = 1, RULE_contexts = 2, RULE_cmd_header = 3, 
		RULE_cmd = 4, RULE_cmd_checklist = 5, RULE_cmd_checklist_item = 6, RULE_checklist_item_name = 7, 
		RULE_checklist_item_value = 8, RULE_cmd_sublist_start = 9, RULE_cmd_sublist_end = 10, 
		RULE_cmd_docstring = 11, RULE_cmd_separator = 12;
	public static readonly string[] ruleNames = {
		"doc", "title", "contexts", "cmd_header", "cmd", "cmd_checklist", "cmd_checklist_item", 
		"checklist_item_name", "checklist_item_value", "cmd_sublist_start", "cmd_sublist_end", 
		"cmd_docstring", "cmd_separator"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'---//---'", "'>'", "'==='", 
		"'---'", "'@<'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Header_Cmd", "Checklist_Cmd", "Checklist_Sub_Cmd", "Checklist_Sub_End_Cmd", 
		"DocString_Cmd", "Checklist_Item_Cmd", "Separator_Cmd", "CHECKLIST_SUB_END_", 
		"HEADER_", "CHECKLIST_", "CHECKLIST_SUB_", "CTX_START_", "ITEM_START_", 
		"EOL", "WS", "CHR", "BLANK_LINE", "ErrorChar", "S_WS", "Ctx", "Separator", 
		"NameErrorChar"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ChecklistParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ChecklistParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ChecklistParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ChecklistParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_headerContext cmd_header() {
			return GetRuleContext<Cmd_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(ChecklistParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(ChecklistParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CmdContext[] cmd() {
			return GetRuleContexts<CmdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CmdContext cmd(int i) {
			return GetRuleContext<CmdContext>(i);
		}
		public DocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.EnterDoc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.ExitDoc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChecklistParserVisitor<TResult> typedVisitor = visitor as IChecklistParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocContext doc() {
		DocContext _localctx = new DocContext(Context, State);
		EnterRule(_localctx, 0, RULE_doc);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			cmd_header();
			State = 29;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 27;
					Match(EOL);
					State = 28;
					cmd();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 31;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 33;
				Match(EOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TitleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHR() { return GetTokens(ChecklistParser.CHR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHR(int i) {
			return GetToken(ChecklistParser.CHR, i);
		}
		public TitleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_title; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.EnterTitle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.ExitTitle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChecklistParserVisitor<TResult> typedVisitor = visitor as IChecklistParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTitle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TitleContext title() {
		TitleContext _localctx = new TitleContext(Context, State);
		EnterRule(_localctx, 2, RULE_title);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 36;
				Match(CHR);
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CHR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Ctx() { return GetTokens(ChecklistParser.Ctx); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ctx(int i) {
			return GetToken(ChecklistParser.Ctx, i);
		}
		public ContextsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contexts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.EnterContexts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.ExitContexts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChecklistParserVisitor<TResult> typedVisitor = visitor as IChecklistParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContexts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextsContext contexts() {
		ContextsContext _localctx = new ContextsContext(Context, State);
		EnterRule(_localctx, 4, RULE_contexts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 41;
				Match(Ctx);
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Ctx );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Header_Cmd() { return GetToken(ChecklistParser.Header_Cmd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TitleContext title() {
			return GetRuleContext<TitleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContextsContext contexts() {
			return GetRuleContext<ContextsContext>(0);
		}
		public Cmd_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.EnterCmd_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.ExitCmd_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChecklistParserVisitor<TResult> typedVisitor = visitor as IChecklistParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_headerContext cmd_header() {
		Cmd_headerContext _localctx = new Cmd_headerContext(Context, State);
		EnterRule(_localctx, 6, RULE_cmd_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			Match(Header_Cmd);
			State = 47;
			title();
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ctx) {
				{
				State = 48;
				contexts();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_checklistContext cmd_checklist() {
			return GetRuleContext<Cmd_checklistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_checklist_itemContext cmd_checklist_item() {
			return GetRuleContext<Cmd_checklist_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_sublist_startContext cmd_sublist_start() {
			return GetRuleContext<Cmd_sublist_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_sublist_endContext cmd_sublist_end() {
			return GetRuleContext<Cmd_sublist_endContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_docstringContext cmd_docstring() {
			return GetRuleContext<Cmd_docstringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_separatorContext cmd_separator() {
			return GetRuleContext<Cmd_separatorContext>(0);
		}
		public CmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.EnterCmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.ExitCmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChecklistParserVisitor<TResult> typedVisitor = visitor as IChecklistParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmdContext cmd() {
		CmdContext _localctx = new CmdContext(Context, State);
		EnterRule(_localctx, 8, RULE_cmd);
		try {
			State = 57;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Checklist_Cmd:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51;
				cmd_checklist();
				}
				break;
			case Checklist_Item_Cmd:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52;
				cmd_checklist_item();
				}
				break;
			case Checklist_Sub_Cmd:
				EnterOuterAlt(_localctx, 3);
				{
				State = 53;
				cmd_sublist_start();
				}
				break;
			case Checklist_Sub_End_Cmd:
				EnterOuterAlt(_localctx, 4);
				{
				State = 54;
				cmd_sublist_end();
				}
				break;
			case DocString_Cmd:
				EnterOuterAlt(_localctx, 5);
				{
				State = 55;
				cmd_docstring();
				}
				break;
			case Separator_Cmd:
				EnterOuterAlt(_localctx, 6);
				{
				State = 56;
				cmd_separator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_checklistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Checklist_Cmd() { return GetToken(ChecklistParser.Checklist_Cmd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TitleContext title() {
			return GetRuleContext<TitleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContextsContext contexts() {
			return GetRuleContext<ContextsContext>(0);
		}
		public Cmd_checklistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_checklist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.EnterCmd_checklist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.ExitCmd_checklist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChecklistParserVisitor<TResult> typedVisitor = visitor as IChecklistParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_checklist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_checklistContext cmd_checklist() {
		Cmd_checklistContext _localctx = new Cmd_checklistContext(Context, State);
		EnterRule(_localctx, 10, RULE_cmd_checklist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			Match(Checklist_Cmd);
			State = 60;
			title();
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ctx) {
				{
				State = 61;
				contexts();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_checklist_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Checklist_Item_Cmd() { return GetToken(ChecklistParser.Checklist_Item_Cmd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Checklist_item_nameContext checklist_item_name() {
			return GetRuleContext<Checklist_item_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Separator() { return GetToken(ChecklistParser.Separator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Checklist_item_valueContext checklist_item_value() {
			return GetRuleContext<Checklist_item_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContextsContext contexts() {
			return GetRuleContext<ContextsContext>(0);
		}
		public Cmd_checklist_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_checklist_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.EnterCmd_checklist_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.ExitCmd_checklist_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChecklistParserVisitor<TResult> typedVisitor = visitor as IChecklistParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_checklist_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_checklist_itemContext cmd_checklist_item() {
		Cmd_checklist_itemContext _localctx = new Cmd_checklist_itemContext(Context, State);
		EnterRule(_localctx, 12, RULE_cmd_checklist_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(Checklist_Item_Cmd);
			State = 65;
			checklist_item_name();
			State = 66;
			Match(Separator);
			State = 67;
			checklist_item_value();
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ctx) {
				{
				State = 68;
				contexts();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Checklist_item_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHR() { return GetTokens(ChecklistParser.CHR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHR(int i) {
			return GetToken(ChecklistParser.CHR, i);
		}
		public Checklist_item_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checklist_item_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.EnterChecklist_item_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.ExitChecklist_item_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChecklistParserVisitor<TResult> typedVisitor = visitor as IChecklistParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecklist_item_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Checklist_item_nameContext checklist_item_name() {
		Checklist_item_nameContext _localctx = new Checklist_item_nameContext(Context, State);
		EnterRule(_localctx, 14, RULE_checklist_item_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 71;
				Match(CHR);
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CHR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Checklist_item_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHR() { return GetTokens(ChecklistParser.CHR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHR(int i) {
			return GetToken(ChecklistParser.CHR, i);
		}
		public Checklist_item_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checklist_item_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.EnterChecklist_item_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.ExitChecklist_item_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChecklistParserVisitor<TResult> typedVisitor = visitor as IChecklistParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecklist_item_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Checklist_item_valueContext checklist_item_value() {
		Checklist_item_valueContext _localctx = new Checklist_item_valueContext(Context, State);
		EnterRule(_localctx, 16, RULE_checklist_item_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 76;
				Match(CHR);
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CHR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_sublist_startContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Checklist_Sub_Cmd() { return GetToken(ChecklistParser.Checklist_Sub_Cmd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TitleContext title() {
			return GetRuleContext<TitleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContextsContext contexts() {
			return GetRuleContext<ContextsContext>(0);
		}
		public Cmd_sublist_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_sublist_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.EnterCmd_sublist_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.ExitCmd_sublist_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChecklistParserVisitor<TResult> typedVisitor = visitor as IChecklistParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_sublist_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_sublist_startContext cmd_sublist_start() {
		Cmd_sublist_startContext _localctx = new Cmd_sublist_startContext(Context, State);
		EnterRule(_localctx, 18, RULE_cmd_sublist_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(Checklist_Sub_Cmd);
			State = 82;
			title();
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ctx) {
				{
				State = 83;
				contexts();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_sublist_endContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Checklist_Sub_End_Cmd() { return GetToken(ChecklistParser.Checklist_Sub_End_Cmd, 0); }
		public Cmd_sublist_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_sublist_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.EnterCmd_sublist_end(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.ExitCmd_sublist_end(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChecklistParserVisitor<TResult> typedVisitor = visitor as IChecklistParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_sublist_end(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_sublist_endContext cmd_sublist_end() {
		Cmd_sublist_endContext _localctx = new Cmd_sublist_endContext(Context, State);
		EnterRule(_localctx, 20, RULE_cmd_sublist_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(Checklist_Sub_End_Cmd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_docstringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DocString_Cmd() { return GetToken(ChecklistParser.DocString_Cmd, 0); }
		public Cmd_docstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_docstring; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.EnterCmd_docstring(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.ExitCmd_docstring(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChecklistParserVisitor<TResult> typedVisitor = visitor as IChecklistParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_docstring(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_docstringContext cmd_docstring() {
		Cmd_docstringContext _localctx = new Cmd_docstringContext(Context, State);
		EnterRule(_localctx, 22, RULE_cmd_docstring);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			Match(DocString_Cmd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_separatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Separator_Cmd() { return GetToken(ChecklistParser.Separator_Cmd, 0); }
		public Cmd_separatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_separator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.EnterCmd_separator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChecklistParserListener typedListener = listener as IChecklistParserListener;
			if (typedListener != null) typedListener.ExitCmd_separator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChecklistParserVisitor<TResult> typedVisitor = visitor as IChecklistParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_separator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_separatorContext cmd_separator() {
		Cmd_separatorContext _localctx = new Cmd_separatorContext(Context, State);
		EnterRule(_localctx, 24, RULE_cmd_separator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(Separator_Cmd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x18', '_', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', ' ', '\n', 
		'\x2', '\r', '\x2', '\xE', '\x2', '!', '\x3', '\x2', '\x5', '\x2', '%', 
		'\n', '\x2', '\x3', '\x3', '\x6', '\x3', '(', '\n', '\x3', '\r', '\x3', 
		'\xE', '\x3', ')', '\x3', '\x4', '\x6', '\x4', '-', '\n', '\x4', '\r', 
		'\x4', '\xE', '\x4', '.', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x34', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '<', '\n', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x41', '\n', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', 'H', '\n', '\b', '\x3', '\t', '\x6', '\t', 'K', '\n', '\t', '\r', 
		'\t', '\xE', '\t', 'L', '\x3', '\n', '\x6', '\n', 'P', '\n', '\n', '\r', 
		'\n', '\xE', '\n', 'Q', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', 'W', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x2', '\x2', '\xF', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x2', '\x2', '\x2', '`', '\x2', '\x1C', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\'', '\x3', '\x2', '\x2', '\x2', '\x6', ',', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x30', '\x3', '\x2', '\x2', '\x2', '\n', ';', 
		'\x3', '\x2', '\x2', '\x2', '\f', '=', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x10', 'J', '\x3', '\x2', '\x2', 
		'\x2', '\x12', 'O', '\x3', '\x2', '\x2', '\x2', '\x14', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\x16', 'X', '\x3', '\x2', '\x2', '\x2', '\x18', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\\', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1F', '\x5', '\b', '\x5', '\x2', '\x1D', '\x1E', '\a', '\x10', '\x2', 
		'\x2', '\x1E', ' ', '\x5', '\n', '\x6', '\x2', '\x1F', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', ' ', '!', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', '\x2', '\"', 
		'$', '\x3', '\x2', '\x2', '\x2', '#', '%', '\a', '\x10', '\x2', '\x2', 
		'$', '#', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', 
		'%', '\x3', '\x3', '\x2', '\x2', '\x2', '&', '(', '\a', '\x12', '\x2', 
		'\x2', '\'', '&', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', 
		'\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', 
		'\x2', '\x2', '\x2', '*', '\x5', '\x3', '\x2', '\x2', '\x2', '+', '-', 
		'\a', '\x16', '\x2', '\x2', ',', '+', '\x3', '\x2', '\x2', '\x2', '-', 
		'.', '\x3', '\x2', '\x2', '\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', 
		'.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\a', '\x3', '\x2', '\x2', '\x31', '\x33', '\x5', 
		'\x4', '\x3', '\x2', '\x32', '\x34', '\x5', '\x6', '\x4', '\x2', '\x33', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\t', '\x3', '\x2', '\x2', '\x2', '\x35', '<', '\x5', '\f', 
		'\a', '\x2', '\x36', '<', '\x5', '\xE', '\b', '\x2', '\x37', '<', '\x5', 
		'\x14', '\v', '\x2', '\x38', '<', '\x5', '\x16', '\f', '\x2', '\x39', 
		'<', '\x5', '\x18', '\r', '\x2', ':', '<', '\x5', '\x1A', '\xE', '\x2', 
		';', '\x35', '\x3', '\x2', '\x2', '\x2', ';', '\x36', '\x3', '\x2', '\x2', 
		'\x2', ';', '\x37', '\x3', '\x2', '\x2', '\x2', ';', '\x38', '\x3', '\x2', 
		'\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', ':', '\x3', 
		'\x2', '\x2', '\x2', '<', '\v', '\x3', '\x2', '\x2', '\x2', '=', '>', 
		'\a', '\x4', '\x2', '\x2', '>', '@', '\x5', '\x4', '\x3', '\x2', '?', 
		'\x41', '\x5', '\x6', '\x4', '\x2', '@', '?', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x43', '\a', '\b', '\x2', '\x2', '\x43', '\x44', '\x5', 
		'\x10', '\t', '\x2', '\x44', '\x45', '\a', '\x17', '\x2', '\x2', '\x45', 
		'G', '\x5', '\x12', '\n', '\x2', '\x46', 'H', '\x5', '\x6', '\x4', '\x2', 
		'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', 
		'\x2', 'H', '\xF', '\x3', '\x2', '\x2', '\x2', 'I', 'K', '\a', '\x12', 
		'\x2', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'M', '\x11', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\a', 
		'\x12', '\x2', '\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', 
		'\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 
		'R', '\x3', '\x2', '\x2', '\x2', 'R', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'S', 'T', '\a', '\x5', '\x2', '\x2', 'T', 'V', '\x5', '\x4', '\x3', '\x2', 
		'U', 'W', '\x5', '\x6', '\x4', '\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 
		'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', '\x15', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'Y', '\a', '\x6', '\x2', '\x2', 'Y', '\x17', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '[', '\a', '\a', '\x2', '\x2', '[', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\a', '\t', '\x2', '\x2', ']', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\r', '!', '$', ')', '.', '\x33', ';', '@', 
		'G', 'L', 'Q', 'V',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Chklstr.Infra.Parser.Antlr.Gen
